// This file was generated by Birch.Swagger.ProxyGenerator
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;
using System.Threading.Tasks;
using System.Net.Http;
using System.Net.Http.Headers;
using Birch.Swagger.ProxyGenerator;

namespace Birch.Swagger.ProxyGenerator
{
    public class WebProxyResponse<T> : IWebProxyResponse
    {
        public HttpResponseMessage Response { get; internal set; }
        public TimeSpan RequestDuration { get; internal set; }
        public Type ExpectedResponseType { get; internal set; }
        public T Body { get; internal set; }
        public Exception Exception { get; set; }
    }
    public class WebProxyResponse : IWebProxyResponse
    {
        public HttpResponseMessage Response { get; internal set; }
        public TimeSpan RequestDuration { get; internal set; }
        public Type ExpectedResponseType { get; internal set; }
        public Exception Exception { get; set; }
    }
    public interface IWebProxyResponse
    {
        HttpResponseMessage Response { get; }
        TimeSpan RequestDuration { get; }
        Type ExpectedResponseType { get; }
        Exception Exception { get; set; }
    }
    public class BeforeRequestActionArgs
    {
        public string Uri { get; set; }
        public string ActionName { get; set; }
        public string Method { get; set; }
    }
    public abstract class BaseProxy
    {
        protected readonly Uri BaseUrl;
        public readonly List<Action<BeforeRequestActionArgs>> GlobalBeforeRequestActions;
        public readonly List<Action<IWebProxyResponse>> GlobalAfterRequestActions;
        public readonly List<Action<BeforeRequestActionArgs>> BeforeRequestActions;
        public readonly List<Action<IWebProxyResponse>> AfterRequestActions;

        protected BaseProxy(Uri baseUrl)
        {
            BaseUrl = baseUrl;
            GlobalBeforeRequestActions = new List<Action<BeforeRequestActionArgs>>();
            GlobalAfterRequestActions = new List<Action<IWebProxyResponse>>();
            BeforeRequestActions = new List<Action<BeforeRequestActionArgs>>();
            AfterRequestActions = new List<Action<IWebProxyResponse>>();
        }

        /// <summary>
        /// Builds the HTTP client.
        /// </summary>
        /// <returns></returns>
        protected virtual HttpClient BuildHttpClient()
        {
            var httpClient = new HttpClient
            {
                BaseAddress = BaseUrl
            };
            return httpClient;
        }
        
        /// <summary>
        /// Runs before the request asynchronous.
        /// </summary>
        /// <param name="requestUri">The request URI.</param>
        /// <param name="requestMethod">The request method.</param>
        /// <returns></returns>
        public virtual Task BeforeRequestAsync(BeforeRequestActionArgs actionArgs)
        {
            foreach (var globalBeforeRequestAction in GlobalBeforeRequestActions)
            {
                globalBeforeRequestAction.Invoke(actionArgs);
            }

            foreach (var beforeRequestAction in BeforeRequestActions)
            {
                beforeRequestAction.Invoke(actionArgs);
            }
            BeforeRequestActions.Clear();
            return Task.FromResult(0);
        }

        /// <summary>
        /// Runs After the request asynchronous.
        /// </summary>
        /// <param name="response">The response.</param>
        /// <param name="webProxyResponse">The web proxy response.</param>
        /// <returns></returns>
        public virtual async Task AfterRequestAsync(IWebProxyResponse webProxyResponse)
        {
            foreach (var globalAfterRequestAction in GlobalAfterRequestActions)
            {
                globalAfterRequestAction.Invoke(webProxyResponse);
            }

            foreach (var afterRequestAction in AfterRequestActions)
            {
                afterRequestAction.Invoke(webProxyResponse);
            }
            AfterRequestActions.Clear();

            if (webProxyResponse.Response.IsSuccessStatusCode)
            {
                return;
            }

            try
            {
                var content = await webProxyResponse.Response.Content.ReadAsStringAsync().ConfigureAwait(false);
                webProxyResponse.Exception = new SimpleHttpResponseException(webProxyResponse.Response.StatusCode, content);
            }
            finally
            {
                webProxyResponse.Response.Content?.Dispose();
            }
        }

        /// <summary>
        /// Appends the query.
        /// </summary>
        /// <param name="currentUrl">The current URL.</param>
        /// <param name="paramName">Name of the parameter.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        protected string AppendQuery(string currentUrl, string paramName, string value)
        {
            if (currentUrl.Contains("?"))
            {
                currentUrl += string.Format("&{0}={1}", paramName, Uri.EscapeUriString(value));
            }
            else
            {
                currentUrl += string.Format("?{0}={1}", paramName, Uri.EscapeUriString(value));
            }
            return currentUrl;
        }
    }

    /// <summary>
    /// Simple Http Response
    /// </summary>
    public class SimpleHttpResponseException : Exception
    {
        public HttpStatusCode StatusCode { get; private set; }

        public SimpleHttpResponseException(HttpStatusCode statusCode, string content)
        : base(content)
        {
            StatusCode = statusCode;
        }
    }
}
// v2/swagger.json Proxy
namespace Birch.Swagger.Petstore.ProxyGenerator.WebProxy {
    public interface IpetWebProxy
    {
        Task addPetAsync(Pet body);
        Task updatePetAsync(Pet body);
        Task<List<Pet>> findPetsByStatusAsync(List<List<string>> status);
        Task<List<Pet>> findPetsByTagsAsync(List<List<string>> tags);
        Task<Pet> getPetByIdAsync(long? petId);
        Task updatePetWithFormAsync(long? petId, string name = null, string status = null);
        Task deletePetAsync(long? petId, string api_key = null);
        Task<ApiResponse> uploadFileAsync(long? petId, string additionalMetadata = null, Tuple<string, byte[]> file = null);
    }
    public interface IstoreWebProxy
    {
        Task<object> getInventoryAsync();
        Task<Order> placeOrderAsync(Order body);
        Task<Order> getOrderByIdAsync(long? orderId);
        Task deleteOrderAsync(long? orderId);
    }
    public interface IuserWebProxy
    {
        Task createUserAsync(User body);
        Task createUsersWithArrayInputAsync(List<User> body);
        Task createUsersWithListInputAsync(List<User> body);
        Task<string> loginUserAsync(string username, string password);
        Task logoutUserAsync();
        Task<User> getUserByNameAsync(string username);
        Task updateUserAsync(string username, User body);
        Task deleteUserAsync(string username);
    }
    /// <summary>
    /// Web Proxy for pet
    /// </summary>
    public class petWebProxy : BaseProxy, IpetWebProxy
    {
        public petWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        ///
        /// </summary>
        /// <param name="body">Pet object that needs to be added to the store</param>
        public async Task addPetAsync(Pet body)
        {
            var url = "pet"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "addPet",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, body).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                };
                await AfterRequestAsync(output);
                if (output.Exception != null)
                {
                    throw output.Exception;
                }

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="body">Pet object that needs to be added to the store</param>
        public async Task updatePetAsync(Pet body)
        {
            var url = "pet"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "updatePet",
                    Method = "PUT",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PutAsJsonAsync(url, body).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                };
                await AfterRequestAsync(output);
                if (output.Exception != null)
                {
                    throw output.Exception;
                }

            }
        }

        /// <summary>
        /// Multiple status values can be provided with comma separated strings
        /// </summary>
        /// <param name="status">Status values that need to be considered for filter</param>
        public async Task<List<Pet>> findPetsByStatusAsync(List<List<string>> status)
        {
            var url = "pet/findByStatus"
            ;
            foreach(var item in status)
            {
                url = AppendQuery(url, "status", item.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "findPetsByStatus",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<List<Pet>>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(List<Pet>)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<List<Pet>>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        /// Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
        /// </summary>
        /// <param name="tags">Tags to filter by</param>
        public async Task<List<Pet>> findPetsByTagsAsync(List<List<string>> tags)
        {
            var url = "pet/findByTags"
            ;
            foreach(var item in tags)
            {
                url = AppendQuery(url, "tags", item.ToString());
            }

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "findPetsByTags",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<List<Pet>>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(List<Pet>)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<List<Pet>>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        /// Returns a single pet
        /// </summary>
        /// <param name="petId">ID of pet to return</param>
        public async Task<Pet> getPetByIdAsync(long? petId)
        {
            var url = "pet/{petId}"
            	.Replace("{petId}", petId.ToString())
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "getPetById",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<Pet>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(Pet)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<Pet>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name">Updated name of the pet</param>
        /// <param name="status">Updated status of the pet</param>
        public async Task updatePetWithFormAsync(long? petId, string name = null, string status = null)
        {
            var url = "pet/{petId}"
            	.Replace("{petId}", petId.ToString())
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "updatePetWithForm",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var formKeyValuePairs = new List<KeyValuePair<string, string>>();
                if (name != null){
                    formKeyValuePairs.Add(new KeyValuePair<string, string>("name", name));
                }
                if (status != null){
                    formKeyValuePairs.Add(new KeyValuePair<string, string>("status", status));
                }
                HttpResponseMessage response;
                var content = new FormUrlEncodedContent(formKeyValuePairs);
                response = await client.PostAsync(url, content).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                };
                await AfterRequestAsync(output);
                if (output.Exception != null)
                {
                    throw output.Exception;
                }

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="api_key"></param>
        /// <param name="petId">Pet id to delete</param>
        public async Task deletePetAsync(long? petId, string api_key = null)
        {
            var url = "pet/{petId}"
            	.Replace("{petId}", petId.ToString())
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "deletePet",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                };
                await AfterRequestAsync(output);
                if (output.Exception != null)
                {
                    throw output.Exception;
                }

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="additionalMetadata">Additional data to pass to server</param>
        /// <param name="file">file to upload</param>
        public async Task<ApiResponse> uploadFileAsync(long? petId, string additionalMetadata = null, Tuple<string, byte[]> file = null)
        {
            var url = "pet/{petId}/uploadImage"
            	.Replace("{petId}", petId.ToString())
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "uploadFile",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var formKeyValuePairs = new List<KeyValuePair<string, string>>();
                if (additionalMetadata != null){
                    formKeyValuePairs.Add(new KeyValuePair<string, string>("additionalMetadata", additionalMetadata));
                }
                var fileContent = new ByteArrayContent(file.Item2);
                fileContent.Headers.ContentDisposition.FileName = file.Item1;
                HttpResponseMessage response;
                using (var content = new MultipartFormDataContent("---------------------------" + DateTime.Now.ToString()))
                {
                    content.Add(fileContent, "file");
                    using (var formUrlEncodedContent = new FormUrlEncodedContent(formKeyValuePairs))
                    {
                        content.Add(formUrlEncodedContent);
                    }
                    response = await client.PostAsync(url, content).ConfigureAwait(false);
                }
                stopwatch.Stop();
                var output = new WebProxyResponse<ApiResponse>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(ApiResponse)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<ApiResponse>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

    }

    /// <summary>
    /// Web Proxy for store
    /// </summary>
    public class storeWebProxy : BaseProxy, IstoreWebProxy
    {
        public storeWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        /// Returns a map of status codes to quantities
        /// </summary>
        public async Task<object> getInventoryAsync()
        {
            var url = "store/inventory"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "getInventory",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<object>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(object)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<object>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="body">order placed for purchasing the pet</param>
        public async Task<Order> placeOrderAsync(Order body)
        {
            var url = "store/order"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "placeOrder",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, body).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<Order>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(Order)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<Order>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        /// For valid response try integer IDs with value &gt;= 1 and &lt;= 10. Other values will generated exceptions
        /// </summary>
        /// <param name="orderId">ID of pet that needs to be fetched</param>
        public async Task<Order> getOrderByIdAsync(long? orderId)
        {
            var url = "store/order/{orderId}"
            	.Replace("{orderId}", orderId.ToString())
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "getOrderById",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<Order>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(Order)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<Order>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        /// For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
        /// </summary>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        public async Task deleteOrderAsync(long? orderId)
        {
            var url = "store/order/{orderId}"
            	.Replace("{orderId}", orderId.ToString())
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "deleteOrder",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                };
                await AfterRequestAsync(output);
                if (output.Exception != null)
                {
                    throw output.Exception;
                }

            }
        }

    }

    /// <summary>
    /// Web Proxy for user
    /// </summary>
    public class userWebProxy : BaseProxy, IuserWebProxy
    {
        public userWebProxy(Uri baseUrl) : base(baseUrl)
        {}

        /// <summary>
        /// This can only be done by the logged in user.
        /// </summary>
        /// <param name="body">Created user object</param>
        public async Task createUserAsync(User body)
        {
            var url = "user"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "createUser",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, body).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                };
                await AfterRequestAsync(output);
                if (output.Exception != null)
                {
                    throw output.Exception;
                }

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="body">List of user object</param>
        public async Task createUsersWithArrayInputAsync(List<User> body)
        {
            var url = "user/createWithArray"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "createUsersWithArrayInput",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, body).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                };
                await AfterRequestAsync(output);
                if (output.Exception != null)
                {
                    throw output.Exception;
                }

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="body">List of user object</param>
        public async Task createUsersWithListInputAsync(List<User> body)
        {
            var url = "user/createWithList"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "createUsersWithListInput",
                    Method = "POST",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PostAsJsonAsync(url, body).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                };
                await AfterRequestAsync(output);
                if (output.Exception != null)
                {
                    throw output.Exception;
                }

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        public async Task<string> loginUserAsync(string username, string password)
        {
            var url = "user/login"
            ;
            url = AppendQuery(url, "username", username.ToString());
            url = AppendQuery(url, "password", password.ToString());

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "loginUser",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<string>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(string)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<string>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        ///
        /// </summary>
        public async Task logoutUserAsync()
        {
            var url = "user/logout"
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "logoutUser",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                };
                await AfterRequestAsync(output);
                if (output.Exception != null)
                {
                    throw output.Exception;
                }

            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing. </param>
        public async Task<User> getUserByNameAsync(string username)
        {
            var url = "user/{username}"
            	.Replace("{username}", username.ToString())
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "getUserByName",
                    Method = "GET",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.GetAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse<User>
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                    ExpectedResponseType = typeof(User)
                };
                await AfterRequestAsync(output);
                if (output.Exception == null)
                {
                    output.Body = await response.Content.ReadAsAsync<User>().ConfigureAwait(false);
                }
                if (output.Exception != null)
                {
                    throw output.Exception;
                }
                return output.Body;

            }
        }

        /// <summary>
        /// This can only be done by the logged in user.
        /// </summary>
        /// <param name="username">name that need to be updated</param>
        /// <param name="body">Updated user object</param>
        public async Task updateUserAsync(string username, User body)
        {
            var url = "user/{username}"
            	.Replace("{username}", username.ToString())
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "updateUser",
                    Method = "PUT",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.PutAsJsonAsync(url, body).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                };
                await AfterRequestAsync(output);
                if (output.Exception != null)
                {
                    throw output.Exception;
                }

            }
        }

        /// <summary>
        /// This can only be done by the logged in user.
        /// </summary>
        /// <param name="username">The name that needs to be deleted</param>
        public async Task deleteUserAsync(string username)
        {
            var url = "user/{username}"
            	.Replace("{username}", username.ToString())
            ;

            using (var client = BuildHttpClient())
            {
                var beforeRequestActionArgs = new BeforeRequestActionArgs
                {
                    Uri = url,
                    ActionName = "deleteUser",
                    Method = "DELETE",
                };
                await BeforeRequestAsync(beforeRequestActionArgs);
                var stopwatch = new Stopwatch();
                stopwatch.Start();
                var response = await client.DeleteAsync(url).ConfigureAwait(false);
                stopwatch.Stop();
                var output = new WebProxyResponse
                {
                    Response = response,
                    RequestDuration = stopwatch.Elapsed,
                };
                await AfterRequestAsync(output);
                if (output.Exception != null)
                {
                    throw output.Exception;
                }

            }
        }

    }

    public class Order
    {
        public long id { get; set; }
        public long petId { get; set; }
        public int quantity { get; set; }
        public DateTime shipDate { get; set; }
        public statusValues status { get; set; }
        public bool complete { get; set; }
        public enum statusValues
        {
            placed,
            approved,
            delivered,
        }

    }

    public class User
    {
        public long id { get; set; }
        public string username { get; set; }
        public string firstName { get; set; }
        public string lastName { get; set; }
        public string email { get; set; }
        public string password { get; set; }
        public string phone { get; set; }
        public int userStatus { get; set; }
    }

    public class Category
    {
        public long id { get; set; }
        public string name { get; set; }
    }

    public class Tag
    {
        public long id { get; set; }
        public string name { get; set; }
    }

    public class ApiResponse
    {
        public int code { get; set; }
        public string type { get; set; }
        public string message { get; set; }
    }

    public class Pet
    {
        public long id { get; set; }
        public Category category { get; set; }
        public string name { get; set; }
        public List<string> photoUrls { get; set; }
        public List<Tag> tags { get; set; }
        public statusValues status { get; set; }
        public enum statusValues
        {
            available,
            pending,
            sold,
        }

    }

}
